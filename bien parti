import requests
import json
from datetime import datetime
import pytz
from pytz import timezone
from PIL import Image, ImageTk
from IPython.display import display
from io import BytesIO
import tkinter

api_key = "a51763db8b72ce22dd839eb16010cdd9"

lat_ville=0
lon_ville=0
ville_a_mettre=[]

meteo= tkinter.Tk() #Fenetre pour entrer la ville et acceder a sa latitude et longitude

def obtention_ville(): # Fonction du bouton pour permettre d'acceder a la ville rentrer mais aussi acceder a sa latitudes et longitudes d'apres l'API
    global entry,lat_ville,lon_ville
    ville= entry.get()
    meteo.destroy() # Fermeture de la fenetre en appuyant sur le bouton
    url_ville = "https://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s&units=metric" % (ville, api_key)#Ouverture du lien pour acceder au coordonnee de la ville 
    response = requests.get(url_ville)
    data_lat_long = json.loads(response.text)
    lat_ville, lon_ville = data_lat_long['coord']['lat'],data_lat_long['coord']['lon'] #creation d'une variable pour avoir les latidutes et longitudes
    ville_a_mettre.append(data_lat_long['name']) #Obtention du nom de la ville pour l'afficher dans la deuxieme fenetre, celle du resultat
    return lat_ville,lon_ville, ville_a_mettre

label= tkinter.Label(meteo, text= 'Pour quelle ville voulez-vous avoir la meteo ?') 
label.pack()
entry= tkinter.Entry(meteo) # Requete pour obtenir la ville 
entry.focus_set()
entry.pack()
tkinter.Button(meteo, text= "Okay",width= 20, command= obtention_ville).pack(pady=20) # Bouton pour valider la ville qui envoi une requete a la fonction obtention_ville
meteo.mainloop() #Feneture de la premiere fenetre

#Obtention des informations meteo via les latidutes et longitudes via la premiere fenetre
url = "https://api.openweathermap.org/data/2.5/onecall?lat=%s&lon=%s&appid=%s&units=metric" % (lat_ville, lon_ville, api_key)
response = requests.get(url) 
data_meteo = json.loads(response.text) # Dictionnaires avec tous les informations


#Fonction pour obtenir le lien de l'image via le json
get_id_photo= data_meteo['current']['weather'][0]['icon']

def get_image(url):
    response = requests.get(url, stream=True)
    if response.headers['Content-Type'].startswith('image/'):
        image = Image.open(response.raw)
        photo = ImageTk.PhotoImage(image)
        return photo
    return None

#Fenetre qui affiche la meteo pour les 3 prochains jours avec la ville 
root= tkinter.Tk()
root.configure(bg='skyblue') 
l = tkinter.Label(root, text=ville_a_mettre, padx=20, pady=20,bg = 'skyblue')
l.pack()
actuel= tkinter.Label(root, text= 'Temps actuel : ', bg = 'skyblue')
actuel.pack()

#Affichage de l'image via la fonction
image = get_image("http://openweathermap.org/img/w/%s.png" % get_id_photo)
image_label = tkinter.Label(root, image=image,bg = 'skyblue')
image_label.pack()
actuel= tkinter.Label(root, text= 'Temperature actuel : ',bg = 'skyblue')
actuel.pack()

#Affichage temperature actuel 
temp = data_meteo['current']['temp']
temp_affiche= tkinter.Label(root, text = temp,bg = 'skyblue')
temp_affiche.pack()

#Sous fenetre dans la fenetre root pour permettre d'utiliser la fonction grid pour l'affichage des resultats
frame = tkinter.Frame(root)
frame.configure(bg = 'skyblue')
frame.pack()

# Adding day labels
aujourd_hui_label = tkinter.Label(frame, text="Aujourd'hui", background='white')
aujourd_hui_label.grid(row=0, column=0, padx=5, pady=5)

demain_label = tkinter.Label(frame, text='Demain', background='white')
demain_label.grid(row=0, column=1, padx=5, pady=5)

apres_demain_label = tkinter.Label(frame, text='Apres-Demain', background='white')
apres_demain_label.grid(row=0, column=2, padx=5, pady=5)

# Afficher Temperature D'Aujourd'hui
temp_aujourdhui = data_meteo['daily'][0]['temp']['day']
temp_affiche_aujourdhui = tkinter.Label(frame, text=temp_aujourdhui,bg = 'skyblue')
temp_affiche_aujourdhui.grid(row=1, column=0, padx=5, pady=5)

#Afficher Tempertature de Demain
temp_demain = data_meteo['daily'][1]['temp']['day']
temp_affiche_demain = tkinter.Label(frame, text=temp_demain,bg = 'skyblue')
temp_affiche_demain.grid(row=1, column=1, padx=5, pady=5)
#Afficher Temperature D'Apres demain

temp_apres_demain = data_meteo['daily'][2]['temp']['day']
temp_affiche_apres_demain = tkinter.Label(frame, text=temp_apres_demain,bg = 'skyblue')
temp_affiche_apres_demain.grid(row=1, column=2, padx=5, pady=5)

#Afficher Image Meteo d'Aujourd'hui
id_photo_aujourd_hui = data_meteo['daily'][0]['weather'][0]['icon']
image_jour = get_image("http://openweathermap.org/img/w/%s.png" % id_photo_aujourd_hui)
image_label = tkinter.Label(frame, image=image_jour,bg = 'skyblue')
image_label.grid(row=4, column=0, padx=5, pady=5)

#Afficher Image Meteo Demain
id_photo_demain = data_meteo['daily'][1]['weather'][0]['icon']
image_demain = get_image("http://openweathermap.org/img/w/%s.png" % id_photo_demain)
image_label = tkinter.Label(frame, image=image_demain,bg = 'skyblue')
image_label.grid(row=4, column=1, padx=5, pady=5)

#Afficher Image Meteo Apres demain
id_photo_apres = data_meteo['daily'][2]['weather'][0]['icon']
image_apres= get_image("http://openweathermap.org/img/w/%s.png" % id_photo_apres)
image_label = tkinter.Label(frame, image=image_apres,bg = 'skyblue')
image_label.grid(row=4, column=2, padx=5, pady=5)

root.mainloop()
